package com.alko.alkomod.energy;

import com.alko.alkomod.block.blockentity.BEBlockEntity;
import net.minecraft.core.BlockPos;
import net.minecraft.core.particles.ParticleOptions;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.level.Level;

import java.util.HashSet;
import java.util.function.Consumer;

public class EnergyNetwork {

    private final int networkId;
    private final HashSet<BEBlockEntity> inputBlocks;  // –ë–ª–æ–∫–∏ —Å INPUT
    private final HashSet<BEBlockEntity> outputBlocks;

    public EnergyNetwork(HashSet<BEBlockEntity> inputBlocks, HashSet<BEBlockEntity> outputBlocks, int networkId) {
        this.inputBlocks = inputBlocks;
        this.outputBlocks = outputBlocks;
        this.networkId = networkId;
        //
        if(!this.outputBlocks.isEmpty()){
            highlightMembers(this.outputBlocks.iterator().next().getLevel());
        }else if (!this.inputBlocks.isEmpty()){
            highlightMembers(this.inputBlocks.iterator().next().getLevel());
        }
        updateInputs();
    }

    public HashSet<BEBlockEntity> getInputBlocks() {
        return inputBlocks;
    }

    public HashSet<BEBlockEntity> getOutputBlocks() {
        return outputBlocks;
    }

    public int getNetworkId() {
        return networkId;
    }

    public void addInputBlock(BEBlockEntity blockEntity) {
        if (this.inputBlocks.add(blockEntity)) { // –î–æ–±–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            updateInputs();
            highlightMembers(blockEntity.getLevel());
        }
    }

    public void addOutputBlock(BEBlockEntity blockEntity) {
        if (this.outputBlocks.add(blockEntity)) {
            updateInputs();
            highlightMembers(blockEntity.getLevel());
        }
    }

    public void delInputBlock(BEBlockEntity blockEntity) {
        if (this.inputBlocks.remove(blockEntity)) {  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –±–ª–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
            updateInputs();
            highlightMembers(blockEntity.getLevel());
            System.out.println("–£–¥–∞–ª—ë–Ω –±–ª–æ–∫ —Å INPUT: " + blockEntity.getBlockPos());
        } else {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ —Å INPUT: " + blockEntity.getBlockPos());
        }
    }

    public void delOutputBlock(BEBlockEntity blockEntity) {
        if (this.outputBlocks.remove(blockEntity)) {
            updateInputs();
            highlightMembers(blockEntity.getLevel());
            System.out.println("–£–¥–∞–ª—ë–Ω –±–ª–æ–∫ —Å OUTPUT: " + blockEntity.getBlockPos());
        } else {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ —Å OUTPUT: " + blockEntity.getBlockPos());
        }
    }

    public void highlightMembers(Level level){
        if (level instanceof ServerLevel serverLevel) {
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å—Ç–∏—Ü
            ParticleOptions inputParticle = ParticleTypes.END_ROD;     // –Ø—Ä–∫–∞—è –∏ –∑–∞–º–µ—Ç–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞
            ParticleOptions outputParticle = ParticleTypes.FLAME;      // –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–ª–æ–∫–∞
            Consumer<BEBlockEntity> spawnParticles = (beBlock) -> {
                BlockPos pos = beBlock.getBlockPos();
                double x = pos.getX() + 0.5;
                double y = pos.getY() + 1.0;  // –ß—É—Ç—å –≤—ã—à–µ –±–ª–æ–∫–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                double z = pos.getZ() + 0.5;

                ParticleOptions particle = inputBlocks.contains(beBlock) ? inputParticle : outputParticle;

                serverLevel.sendParticles(
                        particle,    // –¢–∏–ø —á–∞—Å—Ç–∏—Ü
                        x, y, z,     // –ü–æ–∑–∏—Ü–∏—è
                        30,          // –ö–æ–ª-–≤–æ —á–∞—Å—Ç–∏—Ü
                        0.3, 0.5, 0.3, // –°–º–µ—â–µ–Ω–∏–µ –ø–æ X, Y, Z
                        0.0001         // –°–∫–æ—Ä–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü—ã
                );
            };

            // üîã INPUT –±–ª–æ–∫–∏ ‚Äî END_ROD —á–∞—Å—Ç–∏—Ü—ã
            inputBlocks.forEach(spawnParticles);

            // ‚ö° OUTPUT –±–ª–æ–∫–∏ ‚Äî FLAME —á–∞—Å—Ç–∏—Ü—ã
            outputBlocks.forEach(spawnParticles);

            System.out.println("–°–µ—Ç—å –ø–æ–¥ Id "+this.networkId+" Output= "+this.outputBlocks.size()+" Input= "+this.inputBlocks.size());
        }
    }

    public void updateInputs(){
        outputBlocks.forEach(blockEntity -> {
            blockEntity.getInputs().clear();
            blockEntity.getInputs().addAll(inputBlocks);
        });
    }
}
